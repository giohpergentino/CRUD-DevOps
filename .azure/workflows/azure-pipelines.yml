trigger:
  branches:
    include:
      - staging

stages:
  - stage: Build
    jobs:
      - job: BuildAndPushDockerImages
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          - task: DockerInstaller@0
            inputs:
              dockerVersion: 'latest'

          - task: Docker@2
            displayName: 'Login no Docker Hub'
            inputs:
              command: 'login'
              containerRegistry: 'DockerHub'
              dockerRegistryEndpoint: 'DockerHub'
              username: '$(DOCKER_HUB_USERNAME)'
              password: '$(DOCKER_HUB_PASSWORD)'

          - script: |
              cd frontend
              docker build -t $(DOCKER_HUB_USERNAME)/frontend:latest .
              docker push $(DOCKER_HUB_USERNAME)/frontend:latest
            displayName: 'Build e Push da Imagem do Frontend'

          - script: |
              cd docker
              docker build -t $(DOCKER_HUB_USERNAME)/mysql:latest .
              docker push $(DOCKER_HUB_USERNAME)/mysql:latest
            displayName: 'Build e Push da Imagem do MySQL'

          - script: |
              cd api
              docker build -t $(DOCKER_HUB_USERNAME)/api:latest .
              docker push $(DOCKER_HUB_USERNAME)/api:latest
            displayName: 'Build e Push da Imagem da API'

  - stage: Deploy
    dependsOn: Build
    jobs:
      - deployment: DeployToEC2
        environment: 'staging'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    mkdir -p ~/.ssh
                    echo "$(SSH_PRIVATE_KEY)" > ~/.ssh/id_rsa
                    chmod 600 ~/.ssh/id_rsa
                    ssh-keyscan -H $(EC2_HOST) >> ~/.ssh/known_hosts
                  displayName: 'Configurar SSH'

                - script: |
                    ssh -i ~/.ssh/id_rsa $(EC2_USER)@$(EC2_HOST) << 'EOF'
                      cd /home/ubuntu/CRUD-DevOps
                      git checkout staging
                      git pull origin staging
                    EOF
                  displayName: 'Atualizar repositÃ³rio na EC2'

                - script: |
                    ssh -i ~/.ssh/id_rsa $(EC2_USER)@$(EC2_HOST) << 'EOF'
                      sudo apt-get update
                      sudo apt-get install -y ca-certificates curl gnupg
                      sudo install -m 0755 -d /etc/apt/keyrings
                      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                      sudo chmod a+r /etc/apt/keyrings/docker.gpg
                      echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                      sudo apt-get update
                      sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose
                      sudo usermod -aG docker ubuntu
                      newgrp docker
                    EOF
                  displayName: 'Instalar Docker na EC2'

                - script: |
                    ssh -i ~/.ssh/id_rsa $(EC2_USER)@$(EC2_HOST) << 'EOF'
                      docker login -u "$(DOCKER_HUB_USERNAME)" -p "$(DOCKER_HUB_PASSWORD)"

                      docker network inspect net-devops >/dev/null 2>&1 || docker network create net-devops

                      docker stop frontend || true
                      docker stop api || true
                      docker stop mysql || true

                      docker rm frontend || true
                      docker rm api || true
                      docker rm mysql || true

                      docker pull $(DOCKER_HUB_USERNAME)/frontend:latest
                      docker run -d --name frontend --network net-devops -p 3000:80 $(DOCKER_HUB_USERNAME)/frontend:latest

                      docker pull $(DOCKER_HUB_USERNAME)/mysql:latest
                      docker run -d --name mysql --network net-devops -e MYSQL_ROOT_PASSWORD=admin -e MYSQL_DATABASE=crud_user -e MYSQL_USER=giovanna -e MYSQL_PASSWORD=admin $(DOCKER_HUB_USERNAME)/mysql:latest

                      docker pull $(DOCKER_HUB_USERNAME)/api:latest
                      docker run -d --name api --network net-devops -p 8800:8800 $(DOCKER_HUB_USERNAME)/api:latest
                    EOF
                  displayName: 'Pull e Run dos Containers Docker na EC2'
