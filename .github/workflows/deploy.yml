name: CI/CD Pipeline

on:
  push:
    branches:
      - staging

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Update repository
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ubuntu/CRUD-DevOps
            git checkout staging
            git pull origin staging
          EOF

  build-and-push:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build and Push Docker Images
        run: |
          cd CRUD-DEVOPS/frontend
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:latest

          cd CRUD-DEVOPS/docker
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/mysql:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mysql:latest

          cd CRUD-DEVOPS/api
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/api:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/api:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Install Docker
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl gnupg
            sudo install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            sudo chmod a+r /etc/apt/keyrings/docker.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose
            sudo usermod -aG docker ubuntu
            newgrp docker
          EOF

      - name: Pull and Run Docker Containers on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" -p "${{ secrets.DOCKER_HUB_PASSWORD }}"

            docker network inspect net-devops >/dev/null 2>&1 || docker network create net-devops

            docker stop frontend || true
            docker stop api || true
            docker stop mysql || true

            docker rm frontend || true
            docker rm api || true
            docker rm mysql || true

            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:latest
            docker run -d --name frontend --network net-devops -p 3000:80 ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:latest

            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/mysql:latest
            docker run -d --name mysql --network net-devops -e MYSQL_ROOT_PASSWORD=admin -e MYSQL_DATABASE=crud_user -e MYSQL_USER=giovanna -e MYSQL_PASSWORD=admin ${{ secrets.DOCKER_HUB_USERNAME }}/mysql:latest

            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/api:latest
            docker run -d --name api --network net-devops -p 8800:8800 ${{ secrets.DOCKER_HUB_USERNAME }}/api:latest
          EOF